#version 450 core
#include "common.h"
#include "header.h"

#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_control_flow_attributes : enable

#include "common.h"

struct Q8_0_Block
{
  float16_t d;
  uint8_t items[Q8_0_ITEMS_PER_BLOCK];
};

layout (constant_id = 0) const uint UNK_TOK = 0;

// shape = [1, VH, VW]
layout (binding = 0) readonly buffer InputTensor0
{
  Q8_0_Block input_tensor0[];
};
// shape = [1, H, W]
layout (binding = 1) readonly buffer InputTensor1 { uint input_tensor1[]; };
// shape = [H, W, VW]
layout (binding = 2) writeonly buffer OutputTensor0
{
  float16_t output_tensor0[];
};

layout (push_constant) uniform constants
{
  ShapeConstant shape0;
  ShapeConstant shape1;
};

void
main (void)
{
  uint tid_x = gl_GlobalInvocationID.x;
  uint tid_y = gl_GlobalInvocationID.y;
  uint tid_z = gl_GlobalInvocationID.z;

  uint H = shape1.h;
  uint W = shape1.w;
  uint VH = shape0.h;
  uint VW = shape0.w;

  if (tid_z >= 1 || tid_y >= H || tid_x >= W)
    {
      return;
    }

  uint tok = input_tensor1[tid_y * W + tid_x];
  if (tok >= VH)
    {
      tok = UNK_TOK;
    }

  const uint block_counts
      = (VW + Q8_0_ITEMS_PER_BLOCK - 1) / Q8_0_ITEMS_PER_BLOCK;

  const uint out_base = tid_y * W * VW + tid_x * VW;
  const uint in_base = tok * block_counts;

  for (uint b = 0; b < block_counts; ++b)
    {

      float d = float (input_tensor0[in_base + b].d);
      uint di = b * Q8_0_ITEMS_PER_BLOCK;

      for (uint i = 0; i < Q8_0_ITEMS_PER_BLOCK; ++i)
        {
          if (di + i > VW)
            break;

          float v = float (int8_t (input_tensor0[in_base + b].items[i])) * d;

          output_tensor0[out_base + b * Q8_0_ITEMS_PER_BLOCK + i]
              = float16_t (v);
        }
    }
}
