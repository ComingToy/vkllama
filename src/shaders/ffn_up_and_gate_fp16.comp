#version 450 core
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_control_flow_attributes : enable

#include "common.h"
#include "matmul_conf.h"

layout (local_size_x_id = 253, local_size_y_id = 254,
        local_size_z_id = 255) in;

layout (binding = 0) readonly buffer InputTensor0 { float16_t input0[]; };

layout (binding = 1) readonly buffer InputTensor1 { float16_t up_weight[]; };

layout (binding = 2) readonly buffer InputTensor2 { float16_t gate_weight[]; };

layout (binding = 3) writeonly buffer OutputTensor0 { float16_t output0[]; };

// [M, K] x [K, N] = [M, N]
// C = channels, M = a.height, N = b.height, K = a.width
layout (push_constant) uniform constants
{
  ShapeConstant shape0;
  ShapeConstant shape1;
  ShapeConstant shape2;
  ShapeConstant shape3;
};

void
main ()
{
  uint gid_x = gl_WorkGroupID.x;
  uint gid_y = gl_GlobalInvocationID.y;
  uint gid_z = gl_GlobalInvocationID.z;

  uint C = shape2.c;
  uint M = shape0.h;
  uint K = shape0.w;
  uint N = shape2.w;

  if (gid_z >= C || gid_y >= M || gid_x >= N)
    {
      return;
    }

  uint cs0 = shape0.cs / 2;
  uint hs0 = shape0.hs / 2;
  uint cs1 = shape1.cs / 2;
  uint hs1 = shape1.hs / 2;
  uint cs3 = shape3.cs / 2;
  uint hs3 = shape3.hs / 2;

#define FP16_BLOCK_SIZE 64
#define FP16_SIMD_SIZE (FP16_BLOCK_SIZE / 4)

  uint block_counts = (K + FP16_BLOCK_SIZE - 1) / FP16_BLOCK_SIZE;
  uint ix = gl_SubgroupInvocationID.x / 4;
  uint il = gl_SubgroupInvocationID.x % 4;

  uint offset_a = gid_z * cs0 + gid_y * hs0;

  uint step_blocks = gl_SubgroupSize / 4;

  float sum[2][FP16_TILE_X_SIZE];
  [[unroll]] for (uint i = 0; i < FP16_TILE_X_SIZE; ++i)
    {
      sum[0][i] = .0;
      sum[1][i] = .0;
    }

  for (uint bi = ix; bi < block_counts; bi += step_blocks)
    {
      float tmp[FP16_SIMD_SIZE];
      uint ba = offset_a + bi * FP16_BLOCK_SIZE + il * FP16_SIMD_SIZE;

      [[unroll]] for (uint i = 0; i < FP16_SIMD_SIZE; ++i)
        {
          tmp[i] = float (input0[ba + i]);
        }

      uint offset_b = gid_z * cs1 + bi * FP16_BLOCK_SIZE + il * FP16_SIMD_SIZE
                      + gid_x * hs1;
      uint bb = offset_b;
      for (uint r = 0; r < FP16_TILE_X_SIZE; ++r)
        {
          float sum_b0 = .0;
          float sum_b1 = .0;
          for (uint i = 0; i < FP16_SIMD_SIZE; ++i)
            {
              float a = tmp[i];
              float b0 = float (up_weight[bb + i]);
              float b1 = float (gate_weight[bb + i]);
              sum_b0 += (a * b0);
              sum_b1 += (a * b1);
            }
          bb += hs1;
          sum[0][r] += sum_b0;
          sum[1][r] += sum_b1;
        }
    }

  uint output_offset = gid_z * cs3 + gid_y * hs3 + gid_x;
  [[unroll]] for (uint r = 0; r < FP16_TILE_X_SIZE; ++r)
    {
      if (gid_x + r >= N)
        break;

      float v0 = subgroupAdd (sum[0][r]);
      float v1 = subgroupAdd (sum[1][r]);
      float v = v1 / (1.0 + exp (-v1)) * v0;

      if (subgroupElect ())
        {
          output0[output_offset + r] = float16_t (v);
        }
    }
}
