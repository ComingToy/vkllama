#version 450 core
#extension GL_EXT_shader_16bit_storage : require
#include "common.h"

layout (local_size_x_id = 253, local_size_y_id = 254,
        local_size_z_id = 255) in;

layout (binding = 0) buffer InputTensor0 { float16_t input_query[]; };
layout (binding = 1) readonly buffer InputTensor1 { float freqc_buf[]; };
layout (binding = 2) readonly buffer InputTensor2 { float freqs_buf[]; };

layout (push_constant) uniform constants
{
  ShapeConstant shape;
  uint OFFSET; // kvcache offset
};

void
main (void)
{
  uint tid_x = gl_GlobalInvocationID.x;
  uint tid_y = gl_GlobalInvocationID.y;
  uint tid_z = gl_GlobalInvocationID.z;

  uint C = shape.c;
  uint H = shape.h;
  uint W = shape.w;

  if (tid_z >= C || tid_y >= H || 2 * tid_x >= W)
    {
      return;
    }

  uint fi = (tid_y + OFFSET) * W / 2 + tid_x;
  float freqc = float (freqc_buf[fi]);
  float freqs = float (freqs_buf[fi]);

  uint i0 = tid_z * H * W + tid_y * W + 2 * tid_x;
  uint i1 = i0 + 1;

  float q0 = float (input_query[i0]);
  float q1 = float (input_query[i1]);

  float qr0 = q0 * freqc - q1 * freqs;
  float qr1 = q0 * freqs + q1 * freqc;

  input_query[i0] = float16_t (qr0);
  input_query[i1] = float16_t (qr1);
}
