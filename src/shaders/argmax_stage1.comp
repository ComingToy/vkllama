#version 450 core
layout (local_size_x_id = 253, local_size_y_id = 254,
        local_size_z_id = 255) in;

// max = 0, min = 1
layout (constant_id = 0) const int op_type = 0;
layout (push_constant) uniform constants
{
  uint C;
  uint H;
  uint W;
};

layout(binding=0) readonly buffer InputTensor0 { uint input0[]; };
layout(binding=1) readonly buffer InputTensor1 { float input1[]; };
layout(binding=2) writeonly buffer OutputTensor0 { uint output0[]; };

// block size = [1, 128, 1]
void
main (void)
{
  uint tid_x = gl_GlobalInvocationID.x;
  uint tid_y = gl_GlobalInvocationID.y;
  uint tid_z = gl_GlobalInvocationID.z;

  if (tid_x >= W || tid_y >= H || tid_z >= C)
    {
      return;
    }

  uint input_base = tid_z * H * W + tid_y * W;
  uint output_base = tid_z * H + tid_y;

  float v = input1[input_base];
  uint r = input0[input_base];
  for (uint i = 1; i < W; ++i)
    {
      if ((op_type == 0 && input1[input_base + i] > v)
          || (op_type == 1 && input1[input_base + i] < v))
        {
          v = input1[input_base + i];
          r = i;
        }
    }

  output0[output_base] = input0[input_base + r];
}
