#version 450 core
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_EXT_control_flow_attributes : enable

layout (local_size_x_id = 253, local_size_y_id = 254,
        local_size_z_id = 255) in;

// 0: sum 1: max 2: min
layout (constant_id = 0) const int op_type = 0;
layout (push_constant) uniform constants
{
  int C;
  int H;
  int W;
  float MEAN_SCALE;
};

layout (binding = 0) readonly buffer InputTensor0 { float input0[]; };
layout (binding = 1) writeonly buffer OutputTensor0 { float output0[]; };

// block size = [subgroupsize, 1, 1]
void
main (void)
{
  uint tid_y = gl_GlobalInvocationID.y;
  uint tid_z = gl_GlobalInvocationID.z;

  if (tid_z >= C || tid_y >= H)
    return;

  uint base = tid_z * H * W + tid_y * W;
  float r = op_type == 0 ? .0 : input0[base];

  [[unroll]] for (uint w = gl_SubgroupInvocationID.x; w < W;
                  w += gl_SubgroupSize)
    {
      float v = (input0[base + w]);
      if (op_type == 0)
        {
          r += v;
        }
      else if (op_type == 1)
        {
          r = max (r, v);
        }
      else if (op_type == 2)
        {
          r = min (r, v);
        }
    }

  if (op_type == 0)
    {
      r = subgroupAdd (r);
    }
  else if (op_type == 1)
    {
      r = subgroupMax (r);
    }
  else if (op_type == 2)
    {
      r = subgroupMin (r);
    }

  if (subgroupElect ())
    output0[tid_z * H + tid_y] = (r * MEAN_SCALE);
}
