#version 450 core
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_control_flow_attributes : enable

layout (local_size_x_id = 253, local_size_y_id = 254,
        local_size_z_id = 255) in;

layout (constant_id = 0) const int act = 0;
layout (constant_id = 1) const int transpose_b = 0;
layout (constant_id = 2) const float scale = 1.0;
layout (constant_id = 3) const float offset = 0;

layout (binding = 0) readonly buffer InputTensor0
{
  float16_t input_tensor0[];
};
layout (binding = 1) readonly buffer InputTensor1
{
  float16_t input_tensor1[];
};
layout (binding = 2) writeonly buffer OutputTensor0
{
  float16_t output_tensor0[];
};

layout (push_constant) uniform constants
{
  int C;
  int M;
  int N;
  int K;
};

void
main ()
{
  uint gid_x = gl_WorkGroupID.x;
  uint gid_y = gl_WorkGroupID.y;
  uint gid_z = gl_WorkGroupID.z;

  if (gid_z >= C || gid_y >= M || gid_x >= N)
    {
      return;
    }

  float sum = .0;
  uint i = gl_SubgroupInvocationID.x;
  uint a_stride = gl_SubgroupSize;
  uint b_stride = transpose_b > 0 ? gl_SubgroupSize : gl_SubgroupSize * N;

  [[unroll]] for (; i + 3 * gl_SubgroupSize < K; i += 4 * gl_SubgroupSize)
    {
      uint a0 = gid_y * K + i;
      uint a1 = a0 + a_stride;
      uint a2 = a0 + 2 * a_stride;
      uint a3 = a0 + 3 * a_stride;

      uint b0 = transpose_b > 0 ? gid_z * N * K + gid_x * K + i
                                : gid_z * N * K + i * N + gid_x;
      uint b1 = b0 + b_stride;
      uint b2 = b0 + 2 * b_stride;
      uint b3 = b0 + 3 * b_stride;

      vec4 a = vec4 (float (input_tensor0[a0]), float (input_tensor0[a1]),
                     float (input_tensor0[a2]), float (input_tensor0[a3]));
      vec4 b = vec4 (float (input_tensor1[b0]), float (input_tensor1[b1]),
                     float (input_tensor1[b2]), float (input_tensor1[b3]));

      sum += dot (a, b);
    }

  [[unroll]] for (; i < K; i += gl_SubgroupSize)
    {
      uint a0 = gid_y * K + i;

      uint b0 = transpose_b > 0 ? gid_z * N * K + gid_x * K + i
                                : gid_z * N * K + i * N + gid_x;

      sum += (float (input_tensor0[a0]) * float (input_tensor1[b0]));
    }

  float v = subgroupAdd (sum) * scale + offset;
  v = act == 1 ? v / (1.0 + exp (-v)) : v;

  if (subgroupElect ())
    {
      output_tensor0[gid_z * M * N + gid_y * N + gid_x] = float16_t (v);
    }
}
