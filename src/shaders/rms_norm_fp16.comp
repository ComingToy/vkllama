#version 450 core
#include "common.h"
#include "header.h"

#extension GL_EXT_shader_16bit_storage : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_EXT_control_flow_attributes : enable

// block_size = [subGroupSize, H, C]

layout (constant_id = 0) const float power = 2.0;
layout (constant_id = 1) const float eps = .0;

layout (push_constant) uniform constants { ShapeConstant shape; };

layout (set = 0, binding = 0) readonly buffer InTensor0
{
  float16_t input_tensor[];
};

layout (set = 0, binding = 1) readonly buffer InTensor1
{
  float input_weights[];
};

layout (set = 0, binding = 2) writeonly buffer OutTensor
{
  float16_t output_tensor[];
};

shared float sum[gl_WorkGroupSize.x];
void
main (void)
{
  uint c = gl_GlobalInvocationID.z;
  uint h = gl_GlobalInvocationID.y;

  uint C = shape.c;
  uint H = shape.h;
  uint W = shape.w;
  uint cs = shape.cs / 2;
  uint hs = shape.hs / 2;

  uint row_offset = c * H * W + h * W;

  sum[gl_LocalInvocationID.x] = .0;
  for (uint w = gl_LocalInvocationID.x; w < W; w += gl_WorkGroupSize.x)
    {
      float v = float (input_tensor[row_offset + w]);
      sum[gl_LocalInvocationID.x] += (v * v);
    }

  barrier ();
  memoryBarrierShared ();

  for (uint i = gl_WorkGroupSize.x / 2; i > 0; i /= 2)
    {
      if (gl_LocalInvocationID.x < i)
        {
          sum[gl_LocalInvocationID.x] += sum[gl_LocalInvocationID.x + i];
        }
      barrier ();
      memoryBarrierShared ();
    }

  barrier ();
  memoryBarrierShared ();

  float alpha = 1.0 / (sqrt (sum[0] / float (W) + eps));

  for (uint ow = gl_LocalInvocationID.x; ow < W; ow += gl_WorkGroupSize.x)
    {
      float v = float (input_tensor[row_offset + ow]);
      float w = float (input_weights[ow]);
      output_tensor[row_offset + ow] = float16_t (v * w * alpha);
    }
}

